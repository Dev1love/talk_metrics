#!/bin/bash

# Docker Compose Setup Validation Script for TalkMetrics

echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker Compose –¥–ª—è TalkMetrics"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Check if Docker is installed
check_docker() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if command -v docker &> /dev/null; then
        print_status $GREEN "‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker --version
    else
        print_status $RED "‚úó Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        echo "  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://docs.docker.com/get-docker/"
        return 1
    fi
}

# Check if Docker Compose is available
check_docker_compose() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
    if docker compose version &> /dev/null; then
        print_status $GREEN "‚úì Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω"
        docker compose version
    elif command -v docker-compose &> /dev/null; then
        print_status $GREEN "‚úì Docker Compose (legacy) –¥–æ—Å—Ç—É–ø–µ–Ω"
        docker-compose --version
    else
        print_status $RED "‚úó Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "  Docker Compose –æ–±—ã—á–Ω–æ –∏–¥–µ—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å Docker Desktop"
        return 1
    fi
}

# Validate docker-compose.yml files
validate_compose_files() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    if [[ -f "docker-compose.yml" ]]; then
        print_status $GREEN "‚úì docker-compose.yml –Ω–∞–π–¥–µ–Ω"

        # Try to validate the file
        if docker compose config &> /dev/null || docker-compose config &> /dev/null; then
            print_status $GREEN "‚úì docker-compose.yml –≤–∞–ª–∏–¥–µ–Ω"
        else
            print_status $YELLOW "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å docker-compose.yml (Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        fi
    else
        print_status $RED "‚úó docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ"
        return 1
    fi

    if [[ -f "docker-compose.dev.yml" ]]; then
        print_status $GREEN "‚úì docker-compose.dev.yml –Ω–∞–π–¥–µ–Ω"
    fi
}

# Check required files
check_required_files() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."

    local files=(
        "backend/Dockerfile"
        "backend/.dockerignore"
        "backend/package.json"
        "frontend/Dockerfile"
        "frontend/Dockerfile.dev"
        "frontend/.dockerignore"
        "frontend/nginx.conf"
        "frontend/package.json"
        "database/schema.sql"
        "database/seed.sql"
        ".env.docker"
    )

    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            print_status $GREEN "‚úì $file"
        else
            print_status $RED "‚úó $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

# Check environment configuration
check_env_config() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    if [[ -f ".env" ]]; then
        print_status $GREEN "‚úì .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"

        # Check for required variables
        local required_vars=("OPENAI_API_KEY" "JWT_SECRET" "SESSION_SECRET")

        for var in "${required_vars[@]}"; do
            if grep -q "^${var}=" .env && ! grep -q "^${var}=your_" .env; then
                print_status $GREEN "‚úì $var –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            else
                print_status $YELLOW "‚ö† $var —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            fi
        done
    else
        print_status $YELLOW "‚ö† .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.docker –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:"
        echo "   cp .env.docker .env"
    fi
}

# Print usage instructions
print_instructions() {
    echo ""
    echo "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É:"
    echo "========================"
    print_status $BLUE "Production —Ä–µ–∂–∏–º:"
    echo "  docker compose up -d"
    echo ""
    print_status $BLUE "Development —Ä–µ–∂–∏–º:"
    echo "  docker compose -f docker-compose.dev.yml up -d"
    echo ""
    print_status $BLUE "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
    echo "  docker compose logs -f"
    echo ""
    print_status $BLUE "–û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
    echo "  docker compose down"
    echo ""
    print_status $BLUE "–°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞:"
    echo "  Frontend: http://localhost:4000"
    echo "  Backend:  http://localhost:4001"
    echo "  Database: localhost:5434"
}

# Main execution
main() {
    cd "$(dirname "$0")/.." || exit 1

    check_docker
    check_docker_compose
    validate_compose_files
    check_required_files
    check_env_config
    print_instructions

    echo ""
    print_status $GREEN "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo "   –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. README.docker.md"
}

main "$@"